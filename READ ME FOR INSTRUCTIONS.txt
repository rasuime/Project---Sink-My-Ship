Gameplay:

The flow of your program should be similar to this:

1. Welcome the player to SMS & ask for the player’s name.   You should address the player using their name throughout the gameplay.
2. Create an empty 10x10 board via an array or list.  All spaces should house an ‘O’ as in open, so the player knows those spaces are available to choose.
3. The maximum number of missed guesses should be stored in a constant variable called MISSTOTAL.  For the assignment, this should be set to 20.  MISSTOTAL should be used throughout the program instead of 20.  Your program should still work if I change the MISSTOTAL value.  For example, if I change MISSTOTAL to 5, your program should end if the player submits 5 misses before finding all of the ships or typing quit.  
4. You will read in the locations of the 4 ships from a text file named ships.txt.  For each of the 4 ships, the text file should list all spaces associated with the ship. You can only have 1 of each size.  Some examples:
	a. H2,H3,H4,H5 – this would cover 4-spaced ship (SHIP 4) covering horizontal spaces H2, H3, H4 and H5
	b. B2, C2  – this would create a 2-spaced ship (SHIP 2) cover 2 vertical spaces B2 and C2
5. A new round begins.  For each round, the current board should be displayed.  The player can choose one of the available spaces. The user should reference spaces by row (A-J) first, then by number (1-10).  Player submissions such as B4 & J9 are valid while values such as 3D & H0 are not.   If the user types quit, the game should end.
6. If part of a ship is hit, change the value of the space to an ‘X’ as in x-ray.  If a ship is not hit, change the value to a ‘M’ as in Mike.  Using the examples of #3, a player choosing B4 would case the program to place an X in that location.  However, if a player chose J3, then the program should place a M at that location. It should also print out if the choice was a hit or a miss (such as B2 was a hit or G8 was a miss)
7. Once a ship has been found in its entirety, the program should report that to the player.  An example is:   Ships Found: SHIP2, SHIP4.  This would correlate to finding the 2-space ship and the 4-space ship.  It should print all ships found in subsequent rounds, not just the first round the player found the entire ship.
8. The player should be shown the number of misses they have had to date (such as Misses to date: 3 out of 20 (MISSTOTAL value)
9. The game is over when either all 4 ships are located, the player types quit, or 20 misses (MISSTOTAL value) has occurred (whichever happens first).  If none of these 3 cases have occurred, then steps 4-8 repeat.
10. When the game is over, you should either print that the player won (found all 5 ships before MISSTOTAL (20) misses), the player lost (had MISSTOTAL(20) misses before finding all 5 ships), or that the player quit the quit.

Program Functionality
For full points, your program must include the following functions with the described functionality:

1. main – this should be the central function of your program and the only directly executed function in your program.  The other functions should be called either from main directly or after main calls a function and that function calls a 2nd function.  
	a. You should address the user by their name in this function.
	b. You should store the maximum number of misses in a constant variable called MISSTOTAL which is used throughout the program.
	c. Hints for main:
		Remember that you must be able to determine when all spaces of a ship have been chosen.  For example, once a player chooses B2 and C2, your program should tell the user that the 2-space ship has been destroyed for the remainder of the game. 
		Lists, sets and dictionaries are call by reference.  Meaning if you pass them in a function, the function changes the data directly.  You don’t have to return them from the function.   Since this is the case, you may want to consider creating the initial board in main.  Chapter 5 may aid you with this and functions concepts as a whole.
		Remember you need some way to determine which spaces are associated with 2-spaced ship (SHIP2), which are associated with 3-spaced ship (SHIP3), etc.  You will have to print which ship(s) have been found in their entirety as the program progresses to help the player.  For example, if a player found all of SHIP3, the program should show that SHIP3 has been destroyed in all future rounds.  There are different ways to do this.

2. shipLocations-This function should read in the values of the text file (ships.txt) and store where the ships will reside in the 10x10 board.  For ships.txt:
	a. Your function should handle and produce an error if ships.txt is not located in the directory.  First, your program should tell the player that the ships.txt file was not find.  Then, your program should then run gameOver (either in the shipLocations function or after returning to main) to end the game without any rounds occurring. 
	b. You can assume that each line in ships.txt is associated with one ship.  Each line will contain valid values associated with the ship. That is, each row will have valid spaces to create the ship.  For example, it will not have B2 and C3 for a 2-space ship because diagonals are not allowed. However, the ship order may not be sequential.  For example, you may receive a ships.txt file which looks like this:
		B2,C2

		J1,J2,J3,J4,J5

		F5,F6,F7

		C3,D3,E3,F3,G3,H3

		C1,D1,E1,F1

	c. In the above example, the first row is a 2-space ship, the second is a 5-space ship, the 3rd is a 3-space ship, the 4th is a 6-space ship, and the last is a 4-space ship.  The ships are not listed 2-space ship (SHIP2) 1st, 3-space ship 2nd (SHIP3), 4-space ship 3rd (SHIP4), 4-space ship 4th (SHIP5), and 6-space ship (SHIP6) last.  Your program should be able to accept whatever order the ships are within the file.
	d. Hints for shipLocations function:
		i. You should use try/except to help you handle a possible FileNotFoundError exception.
		ii. If the file is not found, you should notify the user, then run gameOver so that the program will end since this is one of the 3 conditions to end the game. If the file is found, you should continue with the game as normal.  One way to consider facilitating this is sending something back (returning something) so that you can determine if shipLocations was successful or not.
		iii. Some functions in Chapter 7 (Files & Exceptions) such as strip & split, and Chapter 6 (Lists) may help you.

3. printBoard – This function should show the current board. 
	d. This is the only function which should show the board. main (or any other function) should call this function to print the board.  There should be no other way to print it.
	e. Your board should look similar to some type of board.  It should not be printed as a list/array like any version of [[o o o o o o o o o o o],[o,o,o,o,o,o,o,o,o,o]].  It should have some formatting so that it resembles something closer to the examples. 
	f. Hints for printBoard function:
		iv. Format specifiers (such as %6.2f) discussed in Chapter 2 or 3 can help you.  Remember they can be used for floats (f), integers (d), and strings (s).
		v. Topics from chapter 4 (loops) such as nested loops can also be useful in printing out each value of the board.

4. playerChoice – This function should receive the player’s guess and validate it.
	a. If the player’s guess is invalid, it should notify the player and keep asking for a valid input until it receives a valid guess. 
	b. The player must place the guess in one continuous string in one input statement.  For example, this is a valid choice:
		i. Please type in your guess:   B7 – valid submission
	c. Asking the player for the row, then the column via 2 input statements is not allowed.  For example, this is not allowed:
		i. Please type in the Row:   B
		ii. Please type in the Column: 7
	Also, valid input must be continuous, no more than 3 characters, and can only use letters A-J and numbers 1-10.  The letter must come before the number.  For example, these are all invalid guesses:
		i. Please type in your guess:   B 7 – invalid because not continuous
		ii. Please type in your guess:   B:7 – invalid because uses values other than A-J and 1-10.
		iii. Please type in your guess:   7B  – invalid because row must come before column
		iv. Please type in your guess:   B11  – invalid because space does not exist on game board.
		 v. This function should address the player by their name somewhere in the print statement(s).
	e. Hints for playerChoice function:
		i. We discussed several properties of strings in chapter 2.  Some of them (such as indexing) can help you here.
		ii. We also discussed loops.  You should consider using at least 1 here.

5. checkChoice – This function determines whether the choice is a repeat of a previous guess (like choosing B7 for a second time), a hit (X) or a miss (M).
	a. If the guess is a hit or a miss, it should update the respective game board space. 
	b. If the guess is a miss, you will need some way to notify the main program that a miss was submitted. 
	c. If the guess was a repeated guess, it should count neither as a miss nor as a hit.
	d. Hints for checkChoice function:
		i. This should ideally run sometime after playerChoice has confirmed that the player input was valid.
		ii. You will need some way to notify the program that a miss occurred.
		iii. Passing a list into the function will work as a call by reference.  That is, if you pass any list here, changing it in the function will change the actual data.  You will not have to return the list after changing it to see the updates.

6. gameOver – This checks to see if all ships have been found, 20 missed shots have occurred, the ships.txt file couldn’t be read in, or quit was typed. 
	a. If all the ships are found before reaching 20 missed shots, you should tell the player they found all the ships and let the player know they won.
	b. If 20 misses occur before finding all the ships, you should tell the player they reached 20 misses and let the player know they lost.
	c. If accessing ships.txt was unsuccessful, you should tell the player you are stopping the game due to an invalid ships.txt file. 
	d. If quit way typed, you should tell the player that you are stopping the game as requested.
	e. If none of these scenarios occur, the game play should continue.
	f. You should utilize the player’s name in the function’s printout(s).
	g. Hints for gameOver function:
		i. You will need some way to return whether gameplay should end or gameplay should continue.
		ii. You will need some way to determine if all of the ships have been sunk.

7. Your program should include error checking mentioned above for full points.

8. All code should reside in a function except the last line which should be main(). Global variables are not allowed. 

9. You can use lists, sets and/or dictionaries. I have used lists as shorthand for the assignment.  Sets & dictionaries are covered in Chapter 8.

10. You can copy/paste the 6 rows in 2B to create a test ships.txt file.


	